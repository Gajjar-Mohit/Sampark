version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: ERROR
    networks:
      - kafka-network
    logging:
      driver: "none"
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      # Disable ALL Kafka logging
      KAFKA_LOG4J_ROOT_LOGLEVEL: OFF
      KAFKA_LOG4J_LOGGERS: "kafka=OFF,org.apache.kafka=OFF,kafka.coordinator.group.GroupMetadataManager=OFF,state.change.logger=OFF,kafka.log.LogCleaner=OFF,kafka.controller=OFF,kafka.server.KafkaApis=OFF,kafka.network.RequestChannel=OFF,kafka.cluster.Partition=OFF,kafka.log.Log=OFF,kafka.log.LogSegment=OFF,kafka.utils.Log4jController=OFF"
      KAFKA_TOOLS_LOG4J_LOGLEVEL: OFF
      # Additional JVM options to suppress logs
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true -Dlog4j.configuration=file:/opt/confluent/etc/kafka/log4j.properties"
      # Suppress specific Kafka internal logs
      KAFKA_LOG_MESSAGE_FORMAT_VERSION: "2.8"
      KAFKA_LOG_MESSAGE_TIMESTAMP_TYPE: CreateTime
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    logging:
      driver: "none"
    restart: unless-stopped

  # grafana:
  #   image: grafana/grafana-oss
  #   container_name: grafana
  #   ports:
  #     - 3006:3000
  #   environment:
  #     # Disable all Grafana logging
  #     GF_LOG_LEVEL: "off"
  #     GF_LOG_MODE: ""
  #     GF_LOG_CONSOLE_LEVEL: "off"
  #     GF_LOG_FILE_LEVEL: "off"
  #     GF_ALERTING_ENABLED: "false"
  #     GF_METRICS_ENABLED: "false"
  #     GF_TRACING_ENABLED: "false"
  #   networks:
  #     - grafana-network
  #   logging:
  #     driver: "none"
  #   restart: unless-stopped

  # prometheus-server:
  #   image: prom/prometheus
  #   container_name: prometheus-server
  #   depends_on:
  #     - grafana
  #   ports:
  #     - 9090:9090
  #   volumes:
  #     - ./prometheus-config.yml:/etc/prometheus/prometheus.yml
  #   environment:
  #     # Disable Prometheus logging
  #     PROMETHEUS_LOG_LEVEL: "off"
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #     - '--log.level=error'
  #   networks:
  #     - grafana-network
  #     - kafka-network
  #     - chai-pani-network
  #     - chinta-mat-karo-network
  #     - paisa-vasool-bank-network
  #     - babu-rao-ganpatrao-bank-network
  #     - bazzar-pe-network
  #     - chillar-pay-network
  #   logging:
  #     driver: "none"
  #   restart: unless-stopped
    
  # Shared Redis Instance
  redis-stack:
    image: redis/redis-stack:latest
    container_name: redis-stack
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "6379:6379"  # Redis server port
      - "8001:8001"  # RedisInsight web UI port
    networks:
      - kafka-network
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # NTH Switch Service
  nth-switch:
    build:
      context: ./nth
      dockerfile: Dockerfile
    container_name: nth-service
    ports:
      - "3005:3000"
    environment:
      NODE_ENV: production
      KAFKA_BASEURL: kafka:9092
      REDIS_URL: redis://redis-stack:6379
      REDIS_HOST: redis-stack
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      PORT: 3000
    depends_on:
      kafka:
        condition: service_healthy
      redis-stack:
        condition: service_started
    networks:
      - kafka-network
    volumes:
      - ./nth/src:/usr/src/app/src:ro
    command: >
      sh -c "
        echo 'Waiting for Redis to be ready...' &&
        bun run seed &&
        bun run src/index.ts
      "
    restart: unless-stopped

  # Database Services
  babu-rao-ganpatrao-bank-db:
    image: postgres:15-alpine
    container_name: babu-rao-ganpatrao-bank-db
    environment:
      POSTGRES_DB: babu_rao_ganpatrao_bank_db
      POSTGRES_USER: babu_rao_ganpatrao_bank_user
      POSTGRES_PASSWORD: babu_rao_ganpatrao_bank_password
    volumes:
      - postgres_babu_rao_ganpatrao_bank_data:/var/lib/postgresql/data
    networks:
      - babu-rao-ganpatrao-bank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U babu_rao_ganpatrao_bank_user -d babu_rao_ganpatrao_bank_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  chai-pani-db:
    image: postgres:15-alpine
    container_name: chai-pani-db
    environment:
      POSTGRES_DB: chai_pani_db
      POSTGRES_USER: chai_pani_user
      POSTGRES_PASSWORD: chai_pani_password
    volumes:
      - postgres_chai_pani_data:/var/lib/postgresql/data
    networks:
      - chai-pani-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chai_pani_user -d chai_pani_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  chinta-mat-karo-db:
    image: postgres:15-alpine
    container_name: chinta-mat-karo-db
    environment:
      POSTGRES_DB: chinta_mat_karo_db
      POSTGRES_USER: chinta_mat_karo_user
      POSTGRES_PASSWORD: chinta_mat_karo_password
    volumes:
      - postgres_chinta_mat_karo_data:/var/lib/postgresql/data
    networks:
      - chinta-mat-karo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chinta_mat_karo_user -d chinta_mat_karo_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  paisa-vasool-bank-db:
    image: postgres:15-alpine
    container_name: paisa-vasool-bank-db
    environment:
      POSTGRES_DB: paisa_vasool_bank_db
      POSTGRES_USER: paisa_vasool_bank_user
      POSTGRES_PASSWORD: paisa_vasool_bank_password
    volumes:
      - postgres_paisa_vasool_bank_data:/var/lib/postgresql/data
    networks:
      - paisa-vasool-bank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U paisa_vasool_bank_user -d paisa_vasool_bank_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Bank Services
  babu-rao-ganpatrao-bank-service:
    build:
      context: ./banks/babu-rao-ganpatrao-bank
      dockerfile: Dockerfile
    container_name: babu-rao-ganpatrao-bank-service
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://babu_rao_ganpatrao_bank_user:babu_rao_ganpatrao_bank_password@babu-rao-ganpatrao-bank-db:5432/babu_rao_ganpatrao_bank_db
      PORT: 3000
      KAFKA_BASEURL: kafka:9092
      REDIS_URL: redis://babu-rao-ganpatrao-bank-redis-stack:6379
      REDIS_HOST: babu-rao-ganpatrao-bank-redis-stack
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      IIN: "654321"
    depends_on:
      babu-rao-ganpatrao-bank-db:
        condition: service_healthy
      babu-rao-ganpatrao-bank-redis-stack:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - babu-rao-ganpatrao-bank-network
      - kafka-network
    volumes:
      - ./banks/babu-rao-ganpatrao-bank/src:/usr/src/app/src:ro
      - ./banks/babu-rao-ganpatrao-bank/prisma:/usr/src/app/prisma:ro
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        bun prisma migrate deploy &&
        bun run seed &&
        bun run src/index.ts
      "
    restart: unless-stopped

  chai-pani-service:
    build:
      context: ./banks/chai-pani-bank
      dockerfile: Dockerfile
    container_name: chai-pani-service
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://chai_pani_user:chai_pani_password@chai-pani-db:5432/chai_pani_db
      PORT: 3000
      KAFKA_BASEURL: kafka:9092
      REDIS_URL: redis://chai-pani-redis-stack:6379
      REDIS_HOST: chai-pani-redis-stack
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      IIN: "789456"
    depends_on:
      chai-pani-db:
        condition: service_healthy
      chai-pani-redis-stack:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - chai-pani-network
      - kafka-network
    volumes:
      - ./banks/chai-pani-bank/src:/usr/src/app/src:ro
      - ./banks/chai-pani-bank/prisma:/usr/src/app/prisma:ro
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        bun prisma migrate deploy &&
        bun run seed &&
        bun run src/index.ts
      "
    restart: unless-stopped

  chinta-mat-karo-service:
    build:
      context: ./banks/chinta-mat-karo-bank
      dockerfile: Dockerfile
    container_name: chinta-mat-karo-service
    ports:
      - "3003:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://chinta_mat_karo_user:chinta_mat_karo_password@chinta-mat-karo-db:5432/chinta_mat_karo_db
      PORT: 3000
      KAFKA_BASEURL: kafka:9092
      REDIS_URL: redis://chinta-mat-karo-redis-stack:6379
      REDIS_HOST: chinta-mat-karo-redis-stack
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      IIN: "456123"
    depends_on:
      chinta-mat-karo-db:
        condition: service_healthy
      chinta-mat-karo-redis-stack:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - chinta-mat-karo-network
      - kafka-network
    volumes:
      - ./banks/chinta-mat-karo-bank/src:/usr/src/app/src:ro
      - ./banks/chinta-mat-karo-bank/prisma:/usr/src/app/prisma:ro
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        bun prisma migrate deploy &&
        bun run seed &&
        bun run src/index.ts
      "
    restart: unless-stopped

  paisa-vasool-bank-service:
    build:
      context: ./banks/paisa-vasool-bank
      dockerfile: Dockerfile
    container_name: paisa-vasool-bank-service
    ports:
      - "3004:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://paisa_vasool_bank_user:paisa_vasool_bank_password@paisa-vasool-bank-db:5432/paisa_vasool_bank_db
      PORT: 3000
      KAFKA_BASEURL: kafka:9092
      REDIS_URL: redis://paisa-vasool-bank-redis-stack:6379
      REDIS_HOST: paisa-vasool-bank-redis-stack
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      IIN: "321987"
    depends_on:
      paisa-vasool-bank-db:
        condition: service_healthy
      paisa-vasool-bank-redis-stack:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - paisa-vasool-bank-network
      - kafka-network
    volumes:
      - ./banks/paisa-vasool-bank/src:/usr/src/app/src:ro
      - ./banks/paisa-vasool-bank/prisma:/usr/src/app/prisma:ro
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        bun prisma migrate deploy &&
        bun run seed &&
        bun run src/index.ts
      "
    restart: unless-stopped

  # Redis Services for Banks
  babu-rao-ganpatrao-bank-redis-stack:
    image: redis/redis-stack:latest
    container_name: babu-rao-ganpatrao-bank-redis-stack
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "6380:6379"  # Redis server port
      - "8002:8001"  # RedisInsight web UI port
    networks:
      - babu-rao-ganpatrao-bank-network
    volumes:
      - babu_rao_ganpatrao_bank_redis_data:/data
    restart: unless-stopped

  chai-pani-redis-stack:
    image: redis/redis-stack:latest
    container_name: chai-pani-redis-stack
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "6381:6379"  # Redis server port
      - "8003:8001"  # RedisInsight web UI port
    networks:
      - chai-pani-network
    volumes:
      - chai_pani_redis_data:/data
    restart: unless-stopped

  chinta-mat-karo-redis-stack:
    image: redis/redis-stack:latest
    container_name: chinta-mat-karo-redis-stack
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "6382:6379"  # Redis server port
      - "8004:8001"  # RedisInsight web UI port
    networks:
      - chinta-mat-karo-network
    volumes:
      - chinta_mat_karo_redis_data:/data
    restart: unless-stopped

  paisa-vasool-bank-redis-stack:
    image: redis/redis-stack:latest
    container_name: paisa-vasool-bank-redis-stack
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "6383:6379"  # Redis server port
      - "8005:8001"  # RedisInsight web UI port
    networks:
      - paisa-vasool-bank-network
    volumes:
      - paisa_vasool_bank_redis_data:/data
    restart: unless-stopped

  bazzar-pe-db:
    image: postgres:15-alpine
    container_name: bazzar-pe-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: bazzar_pe_db
      POSTGRES_USER: bazzar_pe_user
      POSTGRES_PASSWORD: bazzar_pe_password
    volumes:
      - postgres_bazzar_pe_data:/var/lib/postgresql/data
    networks:
      - bazzar-pe-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bazzar_pe_user -d bazzar_pe_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  bazzar-pe-service:
    build:
      context: ./tpap/BazaarPe
      dockerfile: Dockerfile
    container_name: bazzar-pe-service
    restart: unless-stopped
    ports:
      - "6001:8000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bazzar_pe_user:bazzar_pe_password@bazzar-pe-db:5432/bazzar_pe_db
      PSP_URL: http://paisa-vasool-bank-service:3000/api/v1
      PORT: 8000
    depends_on:
      bazzar-pe-db:
        condition: service_healthy
    networks:
      - bazzar-pe-network
      - paisa-vasool-bank-network
    volumes:
      - ./tpap/BazaarPe/src:/usr/src/app/src:ro
      - ./tpap/BazaarPe/prisma:/usr/src/app/prisma:ro
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        bun prisma migrate deploy &&
        bun run dev
      "  

  chillar-pay-db:
    image: postgres:15-alpine
    container_name: chillar-pay-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: chillar_pay_db
      POSTGRES_USER: chillar_pay_user
      POSTGRES_PASSWORD: chillar_pay_password 
    volumes:
      - postgres_chillar_pay_data:/var/lib/postgresql/data
    networks:
      - chillar-pay-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chillar_pay_user -d chillar_pay_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  chillar-pay-service:
    build:
      context: ./tpap/ChillarPay
      dockerfile: Dockerfile
    container_name: chillar-pay-service
    restart: unless-stopped
    ports:
      - "6002:8000" 
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://chillar_pay_user:chillar_pay_password@chillar-pay-db:5432/chillar_pay_db
      PORT: 8000
      PSP_URL: http://chinta-mat-karo-service:3000/api/v1
    depends_on:
      chillar-pay-db:
        condition: service_healthy
    networks:
      - chillar-pay-network
      - chinta-mat-karo-network
    volumes:
      - ./tpap/ChillarPay/src:/usr/src/app/src:ro
      - ./tpap/ChillarPay/prisma:/usr/src/app/prisma:ro
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        bun prisma migrate deploy &&
        bun run dev
      "
  
networks:
  kafka-network:
    driver: bridge
  babu-rao-ganpatrao-bank-network:
    driver: bridge
  chai-pani-network:
    driver: bridge
  chinta-mat-karo-network:
    driver: bridge
  paisa-vasool-bank-network:
    driver: bridge
  bazzar-pe-network:
    driver: bridge
  chillar-pay-network:
    driver: bridge
  grafana-network:
    driver: bridge

volumes:
  redis-data:
  babu_rao_ganpatrao_bank_redis_data:
  chai_pani_redis_data:
  chinta_mat_karo_redis_data:
  paisa_vasool_bank_redis_data:
  postgres_babu_rao_ganpatrao_bank_data:
  postgres_chai_pani_data:
  postgres_chinta_mat_karo_data:
  postgres_paisa_vasool_bank_data:
  postgres_bazzar_pe_data:
  postgres_chillar_pay_data: